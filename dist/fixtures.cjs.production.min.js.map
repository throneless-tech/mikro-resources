{"version":3,"file":"fixtures.cjs.production.min.js","sources":["../src/MetadataStore.ts","../src/FixtureFactory.ts"],"sourcesContent":["import {\n  BaseMetadataStore,\n  Class,\n  ClassMetadata,\n  PropertyMetadata,\n  DefaultMetadataStore,\n  FixtureFactory as FF,\n} from 'class-fixtures-factory';\nimport { MikroORM, Utils, EntityMetadata } from '@mikro-orm/core';\n\nexport class MetadataStore extends BaseMetadataStore {\n  private defaultStore = new DefaultMetadataStore(true);\n\n  constructor(private readonly orm: MikroORM) {\n    super();\n  }\n\n  make(classType: Class): ClassMetadata {\n    const name = Utils.className(classType.name);\n    const defaultMeta = this.defaultStore.make(classType);\n    let meta: EntityMetadata;\n    try {\n      meta = this.orm.getMetadata().get(name);\n    } catch (error) {\n      return (this.store[name] = defaultMeta);\n    }\n    const classMetadata = <ClassMetadata>{\n      name,\n      properties: Object.values(meta.properties)\n        .map(prop => {\n          const defaultMetaProp = defaultMeta.properties.find(\n            p => p.name === prop.name\n          );\n          if (prop.primary) return null;\n          if (prop.type === 'method') return null;\n          return <PropertyMetadata>{\n            name: prop.name,\n            type: prop.type,\n            array: ['1:m', 'm:n'].includes(prop.reference),\n            enum: prop.enum,\n            ignore: defaultMetaProp?.ignore,\n            input: defaultMetaProp?.input,\n            items: prop.items || defaultMetaProp?.items,\n            max: defaultMetaProp?.max || 3,\n            min: defaultMetaProp?.min || 1,\n            scalar: prop.reference === 'scalar' || defaultMetaProp?.scalar,\n          };\n        })\n        .filter(Boolean),\n    };\n    return (this.store[name] = classMetadata);\n  }\n}\n","import {\n  FixtureFactory as FF,\n  FactoryOptions,\n  FactoryResult as FR,\n  DefaultMetadataStore,\n  PropertyMetadata,\n  Class,\n} from 'class-fixtures-factory';\nimport { MetadataStore } from './MetadataStore';\nimport { MikroORM, EntityName, Utils, Collection } from '@mikro-orm/core';\nimport { DeepPartial, EntityClass } from '@mikro-orm/core/typings';\n\nexport interface FactoryResult<T> {\n  one: () => T;\n  many: (x: number) => T[];\n  oneAndPersist: () => Promise<T>;\n  manyAndPersist: (x: number) => Promise<T[]>;\n  with: (input: DeepPartial<T>) => FactoryResult<T>;\n  ignore: (...props: (keyof T)[]) => FactoryResult<T>;\n}\n\nexport class FixtureFactory {\n  private factory: FF;\n\n  constructor(private readonly orm: MikroORM, options?: FactoryOptions) {\n    this.factory = new FF(options);\n    const store = new MetadataStore(orm);\n    this.factory.setMetadataStore(store);\n    this.registerAllEntities();\n    this.factory.setAssigner(this.assigner.bind(this));\n  }\n\n  register(classTypes: Class[]) {\n    this.factory.register(classTypes);\n  }\n\n  private registerAllEntities() {\n    const metadata = this.orm.getMetadata();\n    const entityNames = Object.keys(metadata.getAll()).filter(\n      v => v[0] === v[0].toUpperCase()\n    );\n    for (const name of entityNames) {\n      const classType = metadata.get(name).class;\n      this.register([classType]);\n    }\n  }\n\n  private assigner(prop: PropertyMetadata, obj: any, value: any) {\n    // TODO: find a better way to detect Collections\n    if (Array.isArray(value) && obj[prop.name].add) {\n      (obj[prop.name] as Collection<any>).add(...value);\n    } else {\n      obj[prop.name] = value;\n    }\n  }\n\n  make<Entity = object>(\n    entityName: EntityClass<Entity>\n  ): FactoryResult<Entity> {\n    const baseResult = this.factory.make(entityName as any);\n\n    return <FactoryResult<Entity>>{\n      ignore: baseResult.ignore as any,\n      with: baseResult.with as any,\n      many: baseResult.many as any,\n      one: baseResult.one as any,\n      oneAndPersist: async () => {\n        const entity = baseResult.one();\n        await this.orm.em.persistAndFlush(entity);\n        return entity;\n      },\n      manyAndPersist: async (x: number) => {\n        const entities = baseResult.many(x);\n        await this.orm.em.persistAndFlush(entities);\n        return entities;\n      },\n    };\n  }\n}\n"],"names":["orm","_super","_this","DefaultMetadataStore","__extends","MetadataStore","classType","meta","name","Utils","className","defaultMeta","this","defaultStore","make","getMetadata","get","error","store","classMetadata","properties","Object","values","map","prop","defaultMetaProp","find","p","primary","type","array","includes","reference","enum","ignore","input","items","max","min","scalar","filter","Boolean","BaseMetadataStore","options","factory","FF","setMetadataStore","registerAllEntities","setAssigner","assigner","bind","FixtureFactory","classTypes","register","metadata","entityNames","keys","getAll","v","toUpperCase","entityNames_1","__values","obj","value","Array","isArray","add","_a","entityName","baseResult","with","many","one","oneAndPersist","entity","em","persistAndFlush","manyAndPersist","x","entities"],"mappings":"0KAaE,WAA6BA,GAA7B,MACEC,0BAD2BC,MAAAF,EAFrBE,eAAe,IAAIC,wBAAqB,KAyClD,OA1CmCC,iBAOjCC,iBAAA,SAAKC,GACH,IAEIC,EAFEC,EAAOC,QAAMC,UAAUJ,EAAUE,MACjCG,EAAcC,KAAKC,aAAaC,KAAKR,GAE3C,IACEC,EAAOK,KAAKZ,IAAIe,cAAcC,IAAIR,GAClC,MAAOS,GACP,OAAQL,KAAKM,MAAMV,GAAQG,EAE7B,IAAMQ,EAA+B,CACnCX,OACAY,WAAYC,OAAOC,OAAOf,EAAKa,YAC5BG,KAAI,SAAAC,GACH,IAAMC,EAAkBd,EAAYS,WAAWM,MAC7C,SAAAC,GAAK,OAAAA,EAAEnB,OAASgB,EAAKhB,QAEvB,OAAIgB,EAAKI,SACS,WAAdJ,EAAKK,KADgB,KAEA,CACvBrB,KAAMgB,EAAKhB,KACXqB,KAAML,EAAKK,KACXC,MAAO,CAAC,MAAO,OAAOC,SAASP,EAAKQ,WACpCC,KAAMT,EAAS,KACfU,OAAQT,MAAAA,SAAAA,EAAiBS,OACzBC,MAAOV,MAAAA,SAAAA,EAAiBU,MACxBC,MAAOZ,EAAKY,QAASX,MAAAA,SAAAA,EAAiBW,OACtCC,KAAKZ,MAAAA,SAAAA,EAAiBY,MAAO,EAC7BC,KAAKb,MAAAA,SAAAA,EAAiBa,MAAO,EAC7BC,OAA2B,WAAnBf,EAAKQ,YAA0BP,MAAAA,SAAAA,EAAiBc,YAG3DC,OAAOC,UAEZ,OAAQ7B,KAAKM,MAAMV,GAAQW,MAxCIuB,kCCcjC,WAA6B1C,EAAe2C,GAAf/B,SAAAZ,EAC3BY,KAAKgC,QAAU,IAAIC,iBAAGF,GACtB,IAAMzB,EAAQ,IAAIb,EAAcL,GAChCY,KAAKgC,QAAQE,iBAAiB5B,GAC9BN,KAAKmC,sBACLnC,KAAKgC,QAAQI,YAAYpC,KAAKqC,SAASC,KAAKtC,OAiDhD,OA9CEuC,qBAAA,SAASC,GACPxC,KAAKgC,QAAQS,SAASD,IAGhBD,gCAAR,mBACQG,EAAW1C,KAAKZ,IAAIe,cACpBwC,EAAclC,OAAOmC,KAAKF,EAASG,UAAUjB,QACjD,SAAAkB,GAAK,OAAAA,EAAE,KAAOA,EAAE,GAAGC,qBAErB,IAAmB,IAAAC,EAAAC,WAAAN,iCAAa,CAA3B,IACGjD,EAAYgD,EAAStC,aAAe,MAC1CJ,KAAKyC,SAAS,CAAC/C,wGAIX6C,qBAAR,SAAiB3B,EAAwBsC,EAAUC,SAE7CC,MAAMC,QAAQF,IAAUD,EAAItC,EAAKhB,MAAM0D,KACzCC,EAACL,EAAItC,EAAKhB,OAA0B0D,uBAAOH,IAE3CD,EAAItC,EAAKhB,MAAQuD,GAIrBZ,iBAAA,SACEiB,GADF,WAGQC,EAAazD,KAAKgC,QAAQ9B,KAAKsD,GAErC,MAA8B,CAC5BlC,OAAQmC,EAAWnC,OACnBoC,KAAMD,EAAe,KACrBE,KAAMF,EAAWE,KACjBC,IAAKH,EAAWG,IAChBC,cAAe,8HAEb,OADMC,EAASL,EAAWG,SACpB5D,KAAKZ,IAAI2E,GAAGC,gBAAgBF,WAClC,OADAP,YACOO,WAETG,eAAgB,SAAOC,sHAErB,OADMC,EAAWV,EAAWE,KAAKO,MAC3BlE,KAAKZ,IAAI2E,GAAGC,gBAAgBG,WAClC,OADAZ,YACOY"}