{"version":3,"file":"fixtures.esm.js","sources":["../src/MetadataStore.ts","../src/FixtureFactory.ts"],"sourcesContent":["import {\n  BaseMetadataStore,\n  Class,\n  ClassMetadata,\n  PropertyMetadata,\n  DefaultMetadataStore,\n  FixtureFactory as FF,\n} from 'class-fixtures-factory';\nimport { MikroORM, Utils, EntityMetadata } from '@mikro-orm/core';\n\nexport class MetadataStore extends BaseMetadataStore {\n  private defaultStore = new DefaultMetadataStore(true);\n\n  constructor(private readonly orm: MikroORM) {\n    super();\n  }\n\n  make(classType: Class): ClassMetadata {\n    const name = Utils.className(classType.name);\n    const defaultMeta = this.defaultStore.make(classType);\n    let meta: EntityMetadata;\n    try {\n      meta = this.orm.getMetadata().get(name);\n    } catch (error) {\n      return (this.store[name] = defaultMeta);\n    }\n    const classMetadata = <ClassMetadata>{\n      name,\n      properties: Object.values(meta.properties)\n        .map(prop => {\n          const defaultMetaProp = defaultMeta.properties.find(\n            p => p.name === prop.name\n          );\n          if (prop.primary) return null;\n          if (prop.type === 'method') return null;\n          return <PropertyMetadata>{\n            name: prop.name,\n            type: prop.type,\n            array: ['1:m', 'm:n'].includes(prop.reference),\n            enum: prop.enum,\n            ignore: defaultMetaProp?.ignore,\n            input: defaultMetaProp?.input,\n            items: prop.items || defaultMetaProp?.items,\n            max: defaultMetaProp?.max || 3,\n            min: defaultMetaProp?.min || 1,\n            scalar: prop.reference === 'scalar' || defaultMetaProp?.scalar,\n          };\n        })\n        .filter(Boolean),\n    };\n    return (this.store[name] = classMetadata);\n  }\n}\n","import {\n  FixtureFactory as FF,\n  FactoryOptions,\n  FactoryResult as FR,\n  DefaultMetadataStore,\n  PropertyMetadata,\n  Class,\n} from 'class-fixtures-factory';\nimport { MetadataStore } from './MetadataStore';\nimport { MikroORM, EntityName, Utils, Collection } from '@mikro-orm/core';\nimport { DeepPartial, EntityClass } from '@mikro-orm/core/typings';\n\nexport interface FactoryResult<T> {\n  one: () => T;\n  many: (x: number) => T[];\n  oneAndPersist: () => Promise<T>;\n  manyAndPersist: (x: number) => Promise<T[]>;\n  with: (input: DeepPartial<T>) => FactoryResult<T>;\n  ignore: (...props: (keyof T)[]) => FactoryResult<T>;\n}\n\nexport class FixtureFactory {\n  private factory: FF;\n\n  constructor(private readonly orm: MikroORM, options?: FactoryOptions) {\n    this.factory = new FF(options);\n    const store = new MetadataStore(orm);\n    this.factory.setMetadataStore(store);\n    this.registerAllEntities();\n    this.factory.setAssigner(this.assigner.bind(this));\n  }\n\n  register(classTypes: Class[]) {\n    this.factory.register(classTypes);\n  }\n\n  private registerAllEntities() {\n    const metadata = this.orm.getMetadata();\n    const entityNames = Object.keys(metadata.getAll()).filter(\n      v => v[0] === v[0].toUpperCase()\n    );\n    for (const name of entityNames) {\n      const classType = metadata.get(name).class;\n      this.register([classType]);\n    }\n  }\n\n  private assigner(prop: PropertyMetadata, obj: any, value: any) {\n    // TODO: find a better way to detect Collections\n    if (Array.isArray(value) && obj[prop.name].add) {\n      (obj[prop.name] as Collection<any>).add(...value);\n    } else {\n      obj[prop.name] = value;\n    }\n  }\n\n  make<Entity = object>(\n    entityName: EntityClass<Entity>\n  ): FactoryResult<Entity> {\n    const baseResult = this.factory.make(entityName as any);\n\n    return <FactoryResult<Entity>>{\n      ignore: baseResult.ignore as any,\n      with: baseResult.with as any,\n      many: baseResult.many as any,\n      one: baseResult.one as any,\n      oneAndPersist: async () => {\n        const entity = baseResult.one();\n        await this.orm.em.persistAndFlush(entity);\n        return entity;\n      },\n      manyAndPersist: async (x: number) => {\n        const entities = baseResult.many(x);\n        await this.orm.em.persistAndFlush(entities);\n        return entities;\n      },\n    };\n  }\n}\n"],"names":["FF"],"mappings":"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"}